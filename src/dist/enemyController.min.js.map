{"version":3,"sources":["enemyController.js"],"names":["_enemy","_interopRequireDefault","require","_flea","EnemyController","bulletController","player","_classCallCheck","this","enemies","mushroomSound","Audio","spiderSound","gameFinish","src","x","y","falling","color","health","type","enemy","Enemy","push","Flea","highScoreList","localStorage","getItem","parse","currentScore","parseInt","length","a","b","console","slice","log","JSON","stringify","setItem","deltaTime","gameOver","_this","forEach","index","collideWith","splice","height","update","context"],"mappings":"2FAAA,IAAAA,OAAAC,uBAAAC,QAAA,eACAC,MAAAF,uBAAAC,QAAA,geACqBE,2BACnB,SAAAA,EAAYC,EAAkBC,GAAQC,gBAAAC,KAAAJ,GACpCI,KAAKC,QAAU,GACfD,KAAKF,OAASA,EACdE,KAAKH,iBAAmBA,EAN5BG,KAAAE,cAAA,IAAAC,MAQIH,KAAKI,YAAc,IAAID,MAP3BH,KAAAK,WAAA,IAAAF,MASIH,KAAKE,cAAcI,IAAM,oCACzBN,KAAKI,YAAYE,IAAM,kCACvBN,KAAKK,WAAWC,IAAM,uFAGZC,EAAGC,EAAGC,EAASC,EAAOC,EAAQC,GACxC,IAAIC,EAAQ,IAAIC,OAAAA,QAAMP,EAAGC,EAAGC,EAASC,EAAOC,EAAQC,GACpDZ,KAAKC,QAAQc,KAAKF,sCAGTN,EAAGC,EAAGG,GACf,IAAIE,EAAQ,IAAIG,MAAAA,QAAKT,EAAGC,EAAGG,EAAQX,MAlBrCA,KAAAC,QAAAc,KAAAF,wCAEE,IAAAI,EAAAC,aAAAC,QAAA,cACAF,EAAKpB,KAALuB,MAAwBvB,GACxB,IAAAwB,EAAAC,SAAyBnB,aAAzBgB,QAAA,iBACAF,EAAKb,EAAcmB,QAAnBF,EACAJ,EAAKZ,KAAa,SAAlBmB,EAAAC,GACA,OAAKvB,EAAAA,IAELwB,QAAKrB,IAAAA,GACNY,EAAAA,EAAAU,MAAA,EAAA,GAsBCD,QAAQE,IAAIX,GACZA,EAAgBY,KAAKC,UAAUb,GAC/BS,QAAQE,IAAIX,GACZC,aAAaa,QAAQ,aAvBLtB,GAChBiB,QAAIb,IAAKK,aAAOJ,QAAAA,eAChBd,KAAAK,WAAaU,sCA0BRiB,EAAWC,GAAU,IAAAC,EAAAlC,KAC1BA,KAAKC,QAAQkC,QAAQ,SAACtB,EAAOuB,GAvBzBvB,EAAKF,QAAOK,EAChBkB,EAAKjC,QAAQc,OAAKF,EAAlB,IA2BMqB,EAAKrC,iBAAiBwC,YAAYxB,KAChCA,EAAMJ,QAxBVQ,EAAAA,YAAgBC,OAEhBG,EAAAA,cAAeC,OAEnBL,EAAAA,QAAmB,GACjBiB,EAAOT,QAAPa,OAAAF,EAAA,IAIFV,EAAQE,UACRX,EAAAA,OAAgBY,YAAAhB,IAAeI,EAA/BT,EAAA,IAAAK,EAAA0B,UACAb,IACAR,EAAAA,cAGDL,EAAA2B,OAAAR,mCAE2BS,GA4B1BzC,KAAKC,QAAQkC,QAAQ,SAACtB,GA3BtBA,EAAKZ,KAAAA","file":"enemyController.min.js","sourcesContent":["import Enemy from \"./enemy.js\";\r\nimport Flea from \"./flea.js\";\r\nexport default class EnemyController {\r\n  constructor(bulletController, player) {\r\n    this.enemies = [];\r\n    this.player = player;\r\n    this.bulletController = bulletController;\r\n    this.mushroomSound = new Audio();\r\n    this.spiderSound = new Audio();\r\n    this.gameFinish = new Audio();\r\n    this.mushroomSound.src = \"./assets/audio/mushroomAudio.flac\";\r\n    this.spiderSound.src = \"./assets/audio/spiderAudio.flac\";\r\n    this.gameFinish.src = \"./assets/audio/game_end.mp3\";\r\n  }\r\n\r\n  createEnemy(x, y, falling, color, health, type) {\r\n    let enemy = new Enemy(x, y, falling, color, health, type);\r\n    this.enemies.push(enemy);\r\n  }\r\n\r\n  createFlea(x, y, health) {\r\n    let enemy = new Flea(x, y, health, this);\r\n    this.enemies.push(enemy);\r\n  }\r\n\r\n  storeScore() {\r\n    let highScoreList = localStorage.getItem(\"highScores\");\r\n    highScoreList = JSON.parse(highScoreList);\r\n    let currentScore = parseInt(localStorage.getItem(\"currentScore\"));\r\n    highScoreList[highScoreList.length] = currentScore;\r\n    highScoreList.sort(function (a, b) {\r\n      return b - a;\r\n    });\r\n    console.log(highScoreList);\r\n    highScoreList = highScoreList.slice(0, 5);\r\n    console.log(highScoreList);\r\n    highScoreList = JSON.stringify(highScoreList);\r\n    console.log(highScoreList);\r\n    localStorage.setItem(\"highScores\", highScoreList);\r\n    console.log(localStorage.getItem(\"highScores\"));\r\n    this.gameFinish.play();\r\n  }\r\n\r\n  update(deltaTime, gameOver) {\r\n    this.enemies.forEach((enemy, index) => {\r\n      if (enemy.health <= 0) {\r\n        this.enemies.splice(index, 1);\r\n        return;\r\n      }\r\n      if (this.bulletController.collideWith(enemy)) {\r\n        if (enemy.falling) {\r\n          this.spiderSound.play();\r\n        } else {\r\n          this.mushroomSound.play();\r\n        }\r\n        if (enemy.health <= 1) {\r\n          this.enemies.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (enemy.falling) {\r\n        if (this.player.collideWith(enemy) || enemy.y > 800 - enemy.height) {\r\n          gameOver();\r\n          this.storeScore();\r\n        }\r\n      }\r\n      enemy.update(deltaTime);\r\n    });\r\n  }\r\n\r\n  draw(context) {\r\n    this.enemies.forEach((enemy) => {\r\n      enemy.draw(context);\r\n    });\r\n  }\r\n}\r\n"]}