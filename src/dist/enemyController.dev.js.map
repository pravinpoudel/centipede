{"version":3,"sources":["enemyController.js"],"names":["EnemyController","bulletController","player","enemies","mushroomSound","Audio","spiderSound","gameFinish","src","x","y","falling","color","health","type","enemy","Enemy","push","Flea","highScoreList","localStorage","getItem","JSON","parse","currentScore","parseInt","length","sort","a","b","console","log","slice","stringify","setItem","play","deltaTime","gameOver","forEach","index","splice","collideWith","height","storeScore","update","context","draw"],"mappings":"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","sourcesContent":["import Enemy from \"./enemy.js\";\r\nimport Flea from \"./flea.js\";\r\nexport default class EnemyController {\r\n  constructor(bulletController, player) {\r\n    this.enemies = [];\r\n    this.player = player;\r\n    this.bulletController = bulletController;\r\n    this.mushroomSound = new Audio();\r\n    this.spiderSound = new Audio();\r\n    this.gameFinish = new Audio();\r\n    this.mushroomSound.src = \"./assets/audio/mushroomAudio.flac\";\r\n    this.spiderSound.src = \"./assets/audio/spiderAudio.flac\";\r\n    this.gameFinish.src = \"./assets/audio/game_end.mp3\";\r\n  }\r\n\r\n  createEnemy(x, y, falling, color, health, type) {\r\n    let enemy = new Enemy(x, y, falling, color, health, type);\r\n    this.enemies.push(enemy);\r\n  }\r\n\r\n  createFlea(x, y, health) {\r\n    let enemy = new Flea(x, y, health, this);\r\n    this.enemies.push(enemy);\r\n  }\r\n\r\n  storeScore() {\r\n    let highScoreList = localStorage.getItem(\"highScores\");\r\n    highScoreList = JSON.parse(highScoreList);\r\n    let currentScore = parseInt(localStorage.getItem(\"currentScore\"));\r\n    highScoreList[highScoreList.length] = currentScore;\r\n    highScoreList.sort(function (a, b) {\r\n      return b - a;\r\n    });\r\n    console.log(highScoreList);\r\n    highScoreList = highScoreList.slice(0, 5);\r\n    console.log(highScoreList);\r\n    highScoreList = JSON.stringify(highScoreList);\r\n    console.log(highScoreList);\r\n    localStorage.setItem(\"highScores\", highScoreList);\r\n    console.log(localStorage.getItem(\"highScores\"));\r\n    this.gameFinish.play();\r\n  }\r\n\r\n  update(deltaTime, gameOver) {\r\n    this.enemies.forEach((enemy, index) => {\r\n      if (enemy.health <= 0) {\r\n        this.enemies.splice(index, 1);\r\n        return;\r\n      }\r\n      if (this.bulletController.collideWith(enemy)) {\r\n        if (enemy.falling) {\r\n          this.spiderSound.play();\r\n        } else {\r\n          this.mushroomSound.play();\r\n        }\r\n        if (enemy.health <= 1) {\r\n          this.enemies.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (enemy.falling) {\r\n        if (this.player.collideWith(enemy) || enemy.y > 800 - enemy.height) {\r\n          gameOver();\r\n          this.storeScore();\r\n        }\r\n      }\r\n      enemy.update(deltaTime);\r\n    });\r\n  }\r\n\r\n  draw(context) {\r\n    this.enemies.forEach((enemy) => {\r\n      enemy.draw(context);\r\n    });\r\n  }\r\n}\r\n"],"file":"enemyController.dev.js"}